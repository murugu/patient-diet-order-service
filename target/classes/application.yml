spring:
  profiles:
    active: development
  cloud:
    stream:
      defaultBinder: kafka
      bindings:
        input:
          # define the destination to which the input MessageChannel should be bound
          #TODO change to real name
          destination: patientdietorders
          # ensures 1 node in a group gets message (point-to-point, not a broadcast)
          group: patientdietorders-group
          # ensure that the Q is durable
          #TODO enable durability once tested
          #durableSubscription: true
          contentType: application/json
        output:
          destination: patientdietorders
          contentType: application/json
---
spring:
  profiles: development
  datasource:
    url: jdbc:mysql://${DOCKER_IP:192.168.99.100}:3306/dev
    username: root
    password: dbpass
    initialize: true
  data:
    elasticsearch:
      cluster-nodes: ${DOCKER_IP:192.168.99.100}:9300
      cluster-name: elasticsearch
  redis:
    host: ${DOCKER_IP:192.168.99.100}
    port: 6379
  cloud:
    stream:
      binders:
        kafka:
         type: kafka
         environment:
           spring:
             cloud:
               stream:
                kafka:
                  binder:
                    brokers: ${DOCKER_IP:192.168.99.100}:9092
                    zkNodes: ${DOCKER_IP:192.168.99.100}:2181
#security:
#  oauth2:
#    resource:
#      userInfoUri: http://${DOCKER_IP:192.168.99.100}:8181/uaa/user
#    client:
#      client-id: acme
#      access-token-uri: http://${DOCKER_IP:192.168.99.100}:8787
eureka:
  instance:
    prefer-ip-address: true
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://${DOCKER_IP:192.168.99.100}:8761/eureka/
---
spring:
  profiles: docker
  datasource:
    url: jdbc:mysql://mysql:3306/dev
    username: root
    password: dbpass
    initialize: true
  data:
    elasticsearch:
      cluster-nodes: elasticsearch:9300
      cluster-name: elasticsearch
  redis:
    host: redis
    port: 6379
  cloud:
    stream:
      binders:
        kafka:
         type: kafka
         environment:
           spring:
             cloud:
               stream:
                kafka:
                  binder:
                    brokers: kafka:9092
                    zkNodes: kafka:2181
security:
  oauth2:
    resource:
      userInfoUri: http://auth-service:8181/uaa/user
    client:
      client-id: acme
eureka:
  instance:
    prefer-ip-address: true
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://discovery-service:8761/eureka/
